name: Update all existing images (Add a new layer)

on:
  workflow_dispatch:
    inputs:
      GenericTag:
        description: Generic Tag (leave empty to use value in generic/tag.txt)
        required: false
        default: ''
      BaseGenericTag:
        description: Base Generic Tag (leave empty to use latest)
        required: false
        default: ''
      WindowsVersions:
        description: Windows Versions to build (all versions matching this pattern will build)
        required: false
        default: '*'
      AgentPool:
        description: Which Agent pool to use?
        type: choice
        options:
        - windows-latest
        - buildgeneric
      PushToProd:
        description: Push to production (Y/N)
        required: false
        default: 'N'

permissions:
  contents: read

defaults:
  run:
    shell: PowerShell

env:
  resGroup: "buildgeneric"
  resLocation: "West Europe"
  machines: "5"
  ARMbranch: "master"
  ARMtemplate: "buildagent"

jobs:
  AnalyzeImages:
    runs-on: [ windows-latest ]
    outputs:
      server2019: ${{ steps.Analyze.outputs.server2019 }}
      server2022: ${{ steps.Analyze.outputs.server2022 }}
      server2019filesOnly: ${{ steps.Analyze.outputs.server2019filesOnly }}
      server2022filesOnly: ${{ steps.Analyze.outputs.server2022filesOnly }}
      runson: ${{ steps.Analyze.outputs.runson }}
    env:
      WindowsVersions: ${{ github.event.inputs.WindowsVersions }}
    steps:
      - name: Analyze
        id: Analyze
        run: |
          $erroractionpreference = "STOP"
          try {
            $unsupportedWindowsVersions = @("10.0.18363.*","10.0.18362.*")
            $windowsVersions = $env:WindowsVersions
            if ("$windowsVersions" -eq "") { $windowsVersions = '*' }
            Write-Host "Locate all images matching '$windowsVersions'"
            $webclient = New-Object System.Net.WebClient
            $webclient.Headers.Add('Accept', "application/json")
            $url = "https://mcr.microsoft.com/v2/businesscentral/tags/list"
            $version = [System.Version]"0.0.0.0"
            $alltags = (($webclient.DownloadString("$url") | ConvertFrom-Json)).tags
            $versions = $alltags | Where-Object { [System.Version]::TryParse($_, [ref] $version) } | Where-Object { "$version" -like $windowsVersions } | Where-Object { -not ($UnsupportedWindowsVersions | Where-Object { "$version" -like $_ }) } | ForEach-Object { $version }
            $server2019 = @($versions | Where-Object { $_ -lt [System.Version]"10.0.17764.0" } | Sort-Object -Descending | ForEach-Object { "$_" } ) | ConvertTo-Json -compress
            $server2022 = @($versions | Where-Object { $_ -ge [System.Version]"10.0.17764.0" } | Sort-Object -Descending | ForEach-Object { "$_" } ) | ConvertTo-Json -compress
            $filesOnlyVersions = $alltags | Where-Object { $_ -like '*-filesonly' } | Where-Object { [System.Version]::TryParse($_.SubString(0,$_.Length-10), [ref] $version) } | Where-Object { "$version" -like $windowsVersions } | Where-Object { -not ($UnsupportedWindowsVersions | Where-Object { "$version" -like $_ }) } | ForEach-Object { $version }
            $server2019filesOnly = @($filesOnlyVersions | Where-Object { $_ -lt [System.Version]"10.0.17764.0" } | Sort-Object -Descending | ForEach-Object { "$_" } ) | ConvertTo-Json -compress
            $server2022filesOnly = @($filesOnlyVersions | Where-Object { $_ -ge [System.Version]"10.0.17764.0" } | Sort-Object -Descending | ForEach-Object { "$_" } ) | ConvertTo-Json -compress
            Add-Content -Path $ENV:GITHUB_OUTPUT -Value "server2019=[$("$server2019".Trim('[]'))]"
            Write-Host "server2019=[$("$server2019".Trim('[]'))]"
            Add-Content -Path $ENV:GITHUB_OUTPUT -Value "server2022=[$("$server2022".Trim('[]'))]"
            Write-Host "server2022=[$("$server2022".Trim('[]'))]"
            Add-Content -Path $ENV:GITHUB_OUTPUT -Value "server2019filesOnly=[$("$server2019filesOnly".Trim('[]'))]"
            Write-Host "server2019filesOnly=[$("$server2019filesOnly".Trim('[]'))]"
            Add-Content -Path $ENV:GITHUB_OUTPUT -Value "server2022filesOnly=[$("$server2022filesOnly".Trim('[]'))]"
            Write-Host "server2022filesOnly=[$("$server2022filesOnly".Trim('[]'))]"
            Add-Content -Path $ENV:GITHUB_OUTPUT -Value "runson=[""${{github.event.inputs.AgentPool}}""]"
            Write-Host "runson=[""${{github.event.inputs.AgentPool}}""]"
          }
          catch {
            Write-Host "::Error::Error analyzing images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2019:
    runs-on: ${{ fromJson(needs.AnalyzeImages.outputs.runson) }}
    needs: [ AnalyzeImages ]
    if: ${{ needs.AnalyzeImages.outputs.server2019 != '[]' }}
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2019)}}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Image
        run: |
          $filesOnlyStr = ""
          $baseGenericTag = '${{ github.event.inputs.BaseGenericTag }}'
          if ($baseGenericTag) { $baseGenericTag = "-$baseGenericTag" }
          $erroractionpreference = "STOP"
          Set-StrictMode -version 2.0
          try {
            $pushRegistry = "mcrbusinesscentral.azurecr.io"
            $job = start-job -ScriptBlock { Param($username, $token, $registry)
              Write-Output $token | docker login --username $username --password-stdin $registry
            } -ArgumentList '${{ secrets.PushUsername }}', '${{ secrets.PushToken }}', $pushRegistry
            $job | Wait-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue | Out-Null
            $result = Receive-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue $job 2> $NULL
            if ($result -ne 'Login Succeeded') {
              throw "docker login failed"
            }
            Set-Location "generic"
            $genericTag = '${{ github.event.inputs.GenericTag }}'
            if ($genericTag -eq '') { $genericTag = Get-Content -path 'tag.txt' }
            [System.Version]$genericTag | Out-Null
            $pushToProd = '${{ github.event.inputs.PushToProd }}' -eq 'Y'
            $osversion = '${{ matrix.version }}'
            $baseimage = "mcr.microsoft.com/businesscentral:$osversion$baseGenericTag$filesOnlyStr"
            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            $inspect = docker inspect $baseimage | ConvertFrom-Json
            $installdotnet6 = ""
            if ($baseGenericTag -eq "-1.0.2.13") {
              $installdotnet6 = "RUN Invoke-WebRequest -Uri 'https://bcartifacts.blob.core.windows.net/prerequisites/dotnet-hosting-6.0.13-win.exe' -OutFile DotNet6-Win.exe ; \`n    start-process -Wait -FilePath .\DotNet6-Win.exe -ArgumentList /quiet ; \`n    Remove-Item -force DotNet6-Win.exe`n"
            }
            if ([version]$inspect.config.Labels.tag -ge [version]$generictag) {
              Write-Host "::Warning::Base Image is Generic Tag $($inspect.config.Labels.tag), skipping build of $osversion-$genericTag$filesonlyStr."
            }
            else {
              $dockerfile = Join-Path (Get-Location) "DOCKERFILE.UPDATE"
              "FROM $baseimage`nCOPY Run /Run/`n$($installdotnet6)LABEL tag=""$genericTag"" \`n      created=""$created""`n" | Set-Content $dockerfile
              $success = $false
              docker build --isolation=hyperv --tag $image --file $dockerfile --memory 4G (Get-Location) | % {
                $_ | Out-Host
                if ($_ -like "Successfully built*") {
                  $success = $true
                }
              }
              if (!$success) {
                throw "Error building image"
              }

              $newtags = @(
                "$pushRegistry/public/businesscentral:$osversion$filesonlyStr-dev"
              )
              if ($pushToProd) {
                $newtags += @(
                    "$pushRegistry/public/businesscentral:$osversion$filesonlyStr"
                    "$pushRegistry/public/businesscentral:$osversion-$genericTag$filesonlyStr"
                )
              }
              $newtags | ForEach-Object {
                Write-Host "Push $_"
                docker tag $image $_
                docker push $_
              }
            }
          }
          catch {
            Write-Host "::Error::Error building images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2022:
    runs-on: ${{ fromJson(needs.AnalyzeImages.outputs.runson) }}
    needs: [ AnalyzeImages ]
    if: ${{ needs.AnalyzeImages.outputs.server2022 != '[]' }}
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2022)}}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Image
        run: |
          $filesOnlyStr = ""
          $baseGenericTag = '${{ github.event.inputs.BaseGenericTag }}'
          if ($baseGenericTag) { $baseGenericTag = "-$baseGenericTag" }
          $erroractionpreference = "STOP"
          Set-StrictMode -version 2.0
          try {
            $pushRegistry = "mcrbusinesscentral.azurecr.io"
            $job = start-job -ScriptBlock { Param($username, $token, $registry)
              Write-Output $token | docker login --username $username --password-stdin $registry
            } -ArgumentList '${{ secrets.PushUsername }}', '${{ secrets.PushToken }}', $pushRegistry
            $job | Wait-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue | Out-Null
            $result = Receive-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue $job 2> $NULL
            if ($result -ne 'Login Succeeded') {
              throw "docker login failed"
            }
            Set-Location "generic"
            $genericTag = '${{ github.event.inputs.GenericTag }}'
            if ($genericTag -eq '') { $genericTag = Get-Content -path 'tag.txt' }
            [System.Version]$genericTag | Out-Null
            $pushToProd = '${{ github.event.inputs.PushToProd }}' -eq 'Y'
            $osversion = '${{ matrix.version }}'
            $baseimage = "mcr.microsoft.com/businesscentral:$osversion$baseGenericTag$filesOnlyStr"
            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            $inspect = docker inspect $baseimage | ConvertFrom-Json
            $installdotnet6 = ""
            if ($baseGenericTag -eq "-1.0.2.13") {
              $installdotnet6 = "RUN Invoke-WebRequest -Uri 'https://bcartifacts.blob.core.windows.net/prerequisites/dotnet-hosting-6.0.13-win.exe' -OutFile DotNet6-Win.exe ; \`n    start-process -Wait -FilePath .\DotNet6-Win.exe -ArgumentList /quiet ; \`n    Remove-Item -force DotNet6-Win.exe`n"
            }
            if ([version]$inspect.config.Labels.tag -ge [version]$generictag) {
              Write-Host "::Warning::Base Image is Generic Tag $($inspect.config.Labels.tag), skipping build of $osversion-$genericTag$filesonlyStr."
            }
            else {
              $dockerfile = Join-Path (Get-Location) "DOCKERFILE.UPDATE"
              "FROM $baseimage`nCOPY Run /Run/`n$($installdotnet6)LABEL tag=""$genericTag"" \`n      created=""$created""`n" | Set-Content $dockerfile
              $success = $false
              docker build --isolation=hyperv --tag $image --file $dockerfile --memory 4G (Get-Location) | % {
                $_ | Out-Host
                if ($_ -like "Successfully built*") {
                  $success = $true
                }
              }
              if (!$success) {
                throw "Error building image"
              }

              $newtags = @(
                "$pushRegistry/public/businesscentral:$osversion$filesonlyStr-dev"
              )
              if ($pushToProd) {
                $newtags += @(
                    "$pushRegistry/public/businesscentral:$osversion$filesonlyStr"
                    "$pushRegistry/public/businesscentral:$osversion-$genericTag$filesonlyStr"
                )
              }
              $newtags | ForEach-Object {
                Write-Host "Push $_"
                docker tag $image $_
                docker push $_
              }
            }
          }
          catch {
            Write-Host "::Error::Error building images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)
          }

  Server2019filesOnly:
    runs-on: [ windows-2019 ]
    needs: [ AnalyzeImages ]
    if: ${{ needs.AnalyzeImages.outputs.server2019filesOnly != '[]' }}
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2019filesOnly)}}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Image
        run: |
          $filesOnlyStr = "-filesonly"
          $baseGenericTag = '${{ github.event.inputs.BaseGenericTag }}'
          if ($baseGenericTag) { $baseGenericTag = "-$baseGenericTag" }
          $erroractionpreference = "STOP"
          Set-StrictMode -version 2.0
          try {
            $pushRegistry = "mcrbusinesscentral.azurecr.io"
            $job = start-job -ScriptBlock { Param($username, $token, $registry)
              Write-Output $token | docker login --username $username --password-stdin $registry
            } -ArgumentList '${{ secrets.PushUsername }}', '${{ secrets.PushToken }}', $pushRegistry
            $job | Wait-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue | Out-Null
            $result = Receive-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue $job 2> $NULL
            if ($result -ne 'Login Succeeded') {
              throw "docker login failed"
            }
            Set-Location "generic"
            $genericTag = '${{ github.event.inputs.GenericTag }}'
            if ($genericTag -eq '') { $genericTag = Get-Content -path 'tag.txt' }
            [System.Version]$genericTag | Out-Null
            $pushToProd = '${{ github.event.inputs.PushToProd }}' -eq 'Y'
            $osversion = '${{ matrix.version }}'
            $baseimage = "mcr.microsoft.com/businesscentral:$osversion$baseGenericTag$filesOnlyStr"
            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            $inspect = docker inspect $baseimage | ConvertFrom-Json
            if ([version]$inspect.config.Labels.tag -ge [version]$generictag) {
              Write-Host "::Warning::Base Image is Generic Tag $($inspect.config.Labels.tag), skipping build of $osversion-$genericTag$filesonlyStr."
            }
            else {
              $dockerfile = Join-Path (Get-Location) "DOCKERFILE.UPDATE"
              "FROM $baseimage`nCOPY Run /Run/`nLABEL tag=""$genericTag"" \`n      created=""$created""`n" | Set-Content $dockerfile
              $success = $false
              docker build --isolation=hyperv --tag $image --file $dockerfile --memory 4G (Get-Location) | % {
                $_ | Out-Host
                if ($_ -like "Successfully built*") {
                  $success = $true
                }
              }
              if (!$success) {
                throw "Error building image"
              }

              $newtags = @(
                "$pushRegistry/public/businesscentral:$osversion$filesonlyStr-dev"
              )
              if ($pushToProd) {
                $newtags += @(
                    "$pushRegistry/public/businesscentral:$osversion$filesonlyStr"
                    "$pushRegistry/public/businesscentral:$osversion-$genericTag$filesonlyStr"
                )
              }
              $newtags | ForEach-Object {
                Write-Host "Push $_"
                docker tag $image $_
                docker push $_
              }
            }
          }
          catch {
            Write-Host "::Error::Error building images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }

  Server2022filesOnly:
    runs-on: [ windows-2022 ]
    needs: [ AnalyzeImages ]
    if: ${{ needs.AnalyzeImages.outputs.server2022filesOnly != '[]' }}
    strategy:
      matrix:
        version: ${{fromJson(needs.AnalyzeImages.outputs.server2022filesOnly)}}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Image
        run: |
          $filesOnlyStr = "-filesonly"
          $baseGenericTag = '${{ github.event.inputs.BaseGenericTag }}'
          if ($baseGenericTag) { $baseGenericTag = "-$baseGenericTag" }
          $erroractionpreference = "STOP"
          Set-StrictMode -version 2.0
          try {
            $pushRegistry = "mcrbusinesscentral.azurecr.io"
            $job = start-job -ScriptBlock { Param($username, $token, $registry)
              Write-Output $token | docker login --username $username --password-stdin $registry
            } -ArgumentList '${{ secrets.PushUsername }}', '${{ secrets.PushToken }}', $pushRegistry
            $job | Wait-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue | Out-Null
            $result = Receive-Job -ErrorAction SilentlyContinue -WarningAction SilentlyContinue $job 2> $NULL
            if ($result -ne 'Login Succeeded') {
              throw "docker login failed"
            }
            Set-Location "generic"
            $genericTag = '${{ github.event.inputs.GenericTag }}'
            if ($genericTag -eq '') { $genericTag = Get-Content -path 'tag.txt' }
            [System.Version]$genericTag | Out-Null
            $pushToProd = '${{ github.event.inputs.PushToProd }}' -eq 'Y'
            $osversion = '${{ matrix.version }}'
            $baseimage = "mcr.microsoft.com/businesscentral:$osversion$baseGenericTag$filesOnlyStr"
            $image = "my:$osversion-$genericTag$filesonlyStr"
            $created = [DateTime]::Now.ToUniversalTime().ToString("yyyyMMddHHmm")
            docker pull $baseimage
            $inspect = docker inspect $baseimage | ConvertFrom-Json
            if ([version]$inspect.config.Labels.tag -ge [version]$generictag) {
              Write-Host "::Warning::Base Image is Generic Tag $($inspect.config.Labels.tag), skipping build of $osversion-$genericTag$filesonlyStr."
            }
            else {
              $dockerfile = Join-Path (Get-Location) "DOCKERFILE.UPDATE"
              "FROM $baseimage`nCOPY Run /Run/`nLABEL tag=""$genericTag"" \`n      created=""$created""`n" | Set-Content $dockerfile
              $success = $false
              docker build --isolation=hyperv --tag $image --file $dockerfile --memory 4G (Get-Location) | % {
                $_ | Out-Host
                if ($_ -like "Successfully built*") {
                  $success = $true
                }
              }
              if (!$success) {
                throw "Error building image"
              }

              $newtags = @(
                "$pushRegistry/public/businesscentral:$osversion$filesonlyStr-dev"
              )
              if ($pushToProd) {
                $newtags += @(
                    "$pushRegistry/public/businesscentral:$osversion$filesonlyStr"
                    "$pushRegistry/public/businesscentral:$osversion-$genericTag$filesonlyStr"
                )
              }
              $newtags | ForEach-Object {
                Write-Host "Push $_"
                docker tag $image $_
                docker push $_
              }
            }
          }
          catch {
            Write-Host "::Error::Error building images. Error was $($_.Exception.Message)"
            $host.SetShouldExit(1)            
          }
