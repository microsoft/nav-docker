name: Create Self-Hosted Agents

on:
  workflow_dispatch:
    inputs:
      Count:
        description: Number of agents to create?
        required: true
        default: 2

permissions:
  contents: read

defaults:
  run:
    shell: PowerShell

env:
  resGroup: "buildgeneric"
  resLocation: "West Europe"
  machines: "5"
  ARMbranch: "master"
  ARMtemplate: "buildagent"

jobs:
  Preparation:
    runs-on: [ windows-latest ]
    outputs:
      matrix: ${{steps.CalculateMatrix.outputs.matrix}}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true 

      - name: Remove Old Agents
        uses: azure/powershell@v1
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          azPSVersion: "latest"
          inlineScript: |
            $resGroup = $env:resGroup
            $repo = $env:GITHUB_REPOSITORY
            Write-Host "Resource Group is $resGroup"
            Write-Host
            $resourceGroup = Get-AzResourceGroup -name $resGroup -ErrorAction Ignore
            if ($resourceGroup) {
              Write-Host "Removing Resource Group $resGroup"
              Remove-AzResourceGroup -Name $resGroup -Force | Out-Host
              Write-Host "Done"
            }
            $runners = (gh api /repos/$repo/actions/runners | ConvertFrom-Json).runners
            $runners | Where-Object { $_.status -eq "offline" } | ForEach-Object {
              Write-host "Unregistering runner $($_.name)"
              $id = $_.id
              gh api -X DELETE /repos/$repo/actions/runners/$id
              Write-Host "Done"
            }

      - name: Create Resource Group
        uses: azure/powershell@v1
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          azPSVersion: "latest"
          inlineScript: |
            $resGroup = $env:resGroup
            $resLocation = $env:resLocation
            Write-Host "Creating resource group $resGroup in $resLocation"
            $resourceGroup = New-AzResourceGroup -Name $resGroup -Location $resLocation -Force
            Write-Host "Done"

      - name: Calculate Matrix
        id: CalculateMatrix
        env:
          count: ${{ github.event.inputs.Count }}
        run: |
          $count = [int]$env:count
          $matrix = @{ "machine" = @(1..$count) } | ConvertTo-Json -compress
          Add-Content -path $ENV:GITHUB_OUTPUT -value "matrix=$matrix"
          Write-Host $matrix

  CreateAgents:
    runs-on: [ windows-latest ]
    needs: [ Preparation ]
    strategy:
      matrix: ${{fromJson(needs.Preparation.outputs.matrix)}}
      fail-fast: true
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true 

      - name: Create Azure VM
        uses: azure/powershell@v1
        env:
          machine: ${{ matrix.machine }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          azPSVersion: "latest"
          inlineScript: |
            $resGroup = $env:resGroup
            $repo = $env:GITHUB_REPOSITORY
            $no = $env:machine
            $templateUri = "https://raw.githubusercontent.com/microsoft/nav-arm-templates/$($env:ARMbranch)/$($env:ARMtemplate).json"
            $registrationToken = (gh api -X POST /repos/$repo/actions/runners/registration-token | ConvertFrom-Json).token
            $headers = @{ 
              "Accept" = "application/json"
            }
            $uri = "https://api.github.com/repos/actions/runner/releases"
            $result = Invoke-WebRequest -UseBasicParsing -Headers $headers -Uri $uri
            $releases = $result.Content | ConvertFrom-Json
            $asset = $releases[0].assets | Where-Object {  $_.name -like "actions-runner-win-x64-*.*.?.zip" }
            $Parameters = @{
              "VmName"              = "$resgroup$no"
              "Remotedesktopaccess" = "-"
              "OperatingSystem"     = "Windows Server 2022"
              "VmSize"              = "Standard_D4as_v5"
              "OSDiskSize"          = 1000
              "StorageAccountType"  = "Premium_LRS"
              "AdminPassword"       = [SecureString](ConvertTo-SecureString -String $env:GH_TOKEN -AsPlainText -Force)
              "Count"               = 1
              "Token"               = $registrationToken
              "Organization"        = "https://github.com/$repo"
              "LabelsOrPool"        = "buildgeneric"
              "AgentUrl"            = $asset.browser_download_url
              "InstallHyperV"       = "Yes"
              "RunInsideDocker"     = "No"
              "FinalSetupScriptUrl" = "additional-installforbuildagent.ps1"
            }
            $resourceGroup = Get-AzResourceGroup -name $resGroup
            $err = $resourceGroup | Test-AzResourceGroupDeployment -TemplateUri $templateUri -TemplateParameterObject $Parameters
            if ($err) {
              $err
              throw "stop"
            }
            Write-Host "Creating Azure VM $($parameters.VmName)"
            $resourceGroup | New-AzResourceGroupDeployment -TemplateUri $templateUri -TemplateParameterObject $Parameters -Name $Parameters.vmName -ErrorAction Ignore
            Write-Host "Done"
